import os

# Path to your project directory
project_directory = './'

# Path to the README file
readme_file = 'README.md'

# Function to generate the markdown table with .sql files
def generate_sql_file_table():
    table = '| **Question Name** | **Link** |\n|------------------|----------|\n'
    
    # Walk through the project directory
    for root, dirs, files in os.walk(project_directory):
        for file in files:
            if file.endswith('.sql'):
                # Create the relative file path
                relative_path = os.path.relpath(os.path.join(root, file), project_directory)
                # Extract the question name from the file name (remove underscores and file extension)
                question_name = os.path.splitext(file.replace('_', ' '))[0]
                # Add a row to the table
                table += f'| {question_name} | [{file}]({relative_path}) |\n'
    
    return table

# Function to update the README file
def update_readme():
    # Generate the new table with .sql file links
    new_table = generate_sql_file_table()
    
    # Read the current README file
    with open(readme_file, 'r') as f:
        content = f.read()
    
    # Find the section in the README where the table is located
    start_marker = '<!-- START SQL TABLE -->'
    end_marker = '<!-- END SQL TABLE -->'
    
    if start_marker in content and end_marker in content:
        # Replace the existing table with the new one
        content = content.split(start_marker)[0] + start_marker + '\n' + new_table + end_marker + content.split(end_marker)[1]
    else:
        # If no table exists, create one and append it
        content += f'\n\n{start_marker}\n{new_table}\n{end_marker}'
    
    # Write the updated content back to README
    with open(readme_file, 'w') as f:
        f.write(content)

# Run the update function
update_readme()
